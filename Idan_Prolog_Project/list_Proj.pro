% מתארי רשימות
% ------------

חבר(_איבר,[_איבר|_]).

חבר(_איבר,[_|_תת_רשימה]):-
	חבר(_איבר,_תת_רשימה).



מיקום_איבר(1,_איבר,_רשימה):-
		ראשון_ברשימה(_איבר,_רשימה).

מיקום_איבר(_מיקום,_איבר,[_|_תת_רשימה]):-
		מיקום_איבר(_מיקום_חדש,_איבר,_תת_רשימה),
		_מיקום  הוא  1 + _מיקום_חדש.

איבר_אחרון_ברשימה(_איבר_אחרון,[_איבר_אחרון]).

איבר_אחרון_ברשימה(_איבר_אחרון,[_|_שאר]):-
	איבר_אחרון_ברשימה(_איבר_אחרון,_שאר).

                  



מספר_איברים(0,[]).

מספר_איברים(_מספר,[_|_זנב]):-
    	מספר_איברים(_קודם,_זנב),
    	_מספר הוא 1 + _קודם.



סכום_רשימה(0,[]).

סכום_רשימה(_סכום,[_ראש|_זנב]):-
		סכום_רשימה(_סכום_זנב,_זנב),
		_סכום  הוא  _ראש + _סכום_זנב.



שרשר([],_רשימה,_רשימה).

שרשר([_איבר|_זנב],_רשימה,[_איבר|_חדש]):-
    		שרשר(_זנב,_רשימה,_חדש).



%% ----------------------------------------------
%% הפיכת רשימת רשימות לרשימה אחת >> שיטוח רשימה.


שרשר([],[]).

שרשר([[]|_זנב],_שטוחה):-
	שרשר(_זנב,_שטוחה).

שרשר([[_ראש|_זנב]|_רשימות],_שטוחה):-
	רשימה(_ראש),
	שרשר(_ראש,_ראש_משוטח),
	שרשר([_זנב|_רשימות],_זנב_שטוחה),
	שרשר(_ראש_משוטח,_שנב_שטוחה,_שטוחה).


שרשר([[_ראש|_זנב]|_רשימות],[_ראש|_שטוחה]):-
	לא רשימה(_ראש),
	שרשר([_זנב|_רשימות],_שטוחה).

שרשר([_ראש|_רשימות],[_ראש|_שטוחה]):-
	לא רשימה(_ראש),
	שרשר(_רשימות,_שטוחה).

רשימה([]).
רשימה([_|_]).

%% --------------------------------------------
הפוך( _רשימה, _הפוכה ) :-
    הפוך( _רשימה, [], _הפוכה ), !.

הפוך([],_צובר,_צובר).

הפוך([_איבר|_זנב],_צובר,_הפוכה):-
    הפוך(_זנב,[_איבר|_צובר],_הפוכה).

מצא_כל(_איבר,_מטרה,_רשימה):-
    קורא(_מטרה),
    הוסף( מחסנית(_איבר) ),
    הכשל;
    !,
    הוסף( מחסנית(תחתית) ),
    אסוף_כל(_רשימה).
     
אסוף_כל(L):-
    הסר( מחסנית(_איבר) ),
    !,
    ( _איבר = תחתית,
      !,
      L = [] ;
      _איבר \= תחתית,	
      L = [_איבר|_שאר],
      אסוף_כל(_שאר)
    ).

%%=========================================

ראשון_ברשימה(_איבר, [_איבר|_]).


מצא_הכל(A,B,C):-
	findall(A,B,C).



חבר_אקראי(_איבר, _רשימה):-
    מספר_איברים(_מספר, _רשימה),
    אקראי(_אקראי),
    _זמני הוא _אקראי * _מספר +1,
    קטום(_זמני, _מיקום),
    מיקום_איבר(_מיקום, _איבר, _רשימה).



%% בין_מספרים(_נמוך,_מספר,_גבוה).  חוק זה מייצר מספרים עוקבים בין גבולות נתונים.
%%===============================
בין_מספרים(_נמוך,_נמוך,_גבוה):-_נמוך=<_גבוה.

בין_מספרים(_נמוך,_מספר,_גבוה):-_נמוך <_גבוה,
                                _נמוך_פלוס הוא _נמוך + 1,
                                בין_מספרים(_נמוך_פלוס,_מספר,_גבוה).




ערך_מוחלט(_ערך,_ערך):- _ערך >= 0 .
ערך_מוחלט(_ערך,_תוצאה):- _ערך< 0, _תוצאה הוא _ערך*(-1).



%============================ 17. א. ============================== 

                             
                                                                                
%%% 17. א.  הורדת_הופעה_ראשונה(_איבר_נתון,_רשימה_נתונה,_רשימה_חדשה).                       

%%% חוק מס' 1: נחוץ אם האיבר איננו חבר ברשימה הנתונה ואנחנו רוצים לקבל את הרשימה המקורית ולא 'כשלון'
הורדת_הופעה_ראשונה(_איבר,[],[]). 

%%% חוק מס' 2:                                               
הורדת_הופעה_ראשונה(_איבר,[_איבר|_רשימה],_רשימה).                                

%%% חוק מס' 3:
הורדת_הופעה_ראשונה(_איבר,[_איבר1|_רשימה],[_איבר1|_רשימה_חדשה]):-                
     			_איבר \= _איבר1,
     			הורדת_הופעה_ראשונה(_איבר,_רשימה,_רשימה_חדשה). 



%%====================================================================



הוצא_איבר(_איבר,[_איבר|_זנב],_זנב).

הוצא_איבר(_איבר,[_ראשון|_זנב],[_ראשון|_זנב_חדש]):-
			הוצא_איבר(_איבר,_זנב,_זנב_חדש).
	
		
%%====================================================================


	
תרגום([],[]). 
                                                                  
תרגום([_איבר|_רשימה],[_ערך_מלולי|_רשימה1]):-                                    
     				קוד(_איבר,_ערך_מלולי),                                                     
     				תרגום(_רשימה,_רשימה1).  
  

%%====================================================================



% תרגום_לפי(_קריטריון,_רשימה,_מתורגמת).

תרגום_לפי(_קריטריון,[],[]).

תרגום_לפי(_קריטריון,[_איבר|_זנב],[_מתורגם|_זנב_מתורגם]):-
	קוד_לפי(_קריטריון,_איבר,_מתורגם),
	תרגום_לפי(_קריטריון,_זנב,_זנב_מתורגם).

%%% קוד_לפי(גובה,_שם,_גובה):-
%%%	משתתף(_שם,_,_גובה).


%%====================================================================


%% חיסור_רשימות(_הרשימה_ממנה_מחסרים, _הרשימה_הנתונה, _התוצאה).
%% ============================================================


%% א. חוק עצירה. אם הרשימה ממנה מחסרים היא ריקה אז גם רשימת התוצאה היא ריקה.

חיסור_רשימות([],_,[]).



%% ב. אם האיבר העומד בראש הרשימה שממנה מחסרים נמצא ברשימה הנתונה 
%%    אז מורידים אותו וממשיכים בתהליך חיסור הרשימות עם שאר אברי הרשימה הנתונה.

%%    סימן ה- !  (cut), משמש כאן בתפקיד else.  אם נכשל בחוק שאחריו מופיע ה- ! הפרולוג עובר לחוק האלטרנטיבי.

חיסור_רשימות([_איבר|_שאר_רשימה],_רשימה,_רשימה_חדשה):-
		חבר(_איבר,_רשימה),!,
		חיסור_רשימות(_שאר_רשימה,_רשימה,_רשימה_חדשה).



%% ג. אם האיבר העומד בראש הרשימה שממנה מחסרים לא נמצא ברשימה הנתונה 
%%    אז מעבירים אותו לרשימת התוצאה וממשיכים בתהליך חיסור הרשימות עם שאר אברי הרשימה הנתונה.

חיסור_רשימות([_איבר|_שאר_רשימה],_רשימה,[_איבר|_זנב]):-
		חיסור_רשימות(_שאר_רשימה,_רשימה,_זנב).

%%================================================================================================= 
                          
                                                                                
%%% 18. הורד_כל(_איבר_נתון,_רשימה_נתונה,_רשימה_ללא_כל_הופעות_האיבר_הנתון).  
%%========================================================================
           
הורד_כל(_איבר,[],[]). 
                                                          
הורד_כל(_איבר,[_איבר|_רשימה],_רשימה_חדשה):-                                     
     			הורד_כל(_איבר,_רשימה,_רשימה_חדשה). 
                                        
הורד_כל(_איבר,[_איבר1|_רשימה],[_איבר1|_רשימה_חדשה]):-                           
     					_איבר \= _איבר1,
     					הורד_כל(_איבר,_רשימה,_רשימה_חדשה).  

%%================================================================================================= 
                                     
                                                                                
%%% 19. ניפוי_רשימה(_רשימה_נתונה,_רשימה_חדשה_ללא_כפילויות). 
%%=========================================================
                           
ניפוי_רשימה([],[]).    
                                                         
ניפוי_רשימה([_איבר|_רשימה],[_איבר|_רשימה_חדשה]):-                               
     				הורד_כל(_איבר,_רשימה,_רשימה1),                                             
     				ניפוי_רשימה(_רשימה1,_רשימה_חדשה).  

%%=================================================================================================    



                                                                                
%%% 37. שרשר(_רשימה,_רשימה_חדשה). - מקבל רשימת רשימות ומשטח אותה לרשימה אחת.
%%===========================================================================

שרשר([_רשימה],_רשימה ).

שרשר([_רשימה|_שאר_הרשימות],_רשימה_משורשרת):-
       		שרשר(_שאר_הרשימות,_רשימת_שאר_הרשימות_המשורשרת),
       		שרשר(_רשימה,_רשימת_שאר_הרשימות_המשורשרת,_רשימה_משורשרת).

%%=================================================================================================    


/*

%% לולאת while - עם 2 תנאים
%% -----------
%% כל עוד אחד מ-2 התנאים לא מתקיים, הלולאה ממשיכה לפעול.

חזור_כל_עוד_לא(_דגל1,_דגל2):-
	חזור_שלי(_דגל1,_,_);
	חזור_שלי(_דגל2,_,_).

חזור_שלי(_דגל,_א,[_א|_שאר]):-לא _דגל.
חזור_שלי(_דגל,_א,[_|_שאר]):-לא _דגל,חזור_שלי(_דגל,_א,_שאר).

*/

%%===============================================================================
%%===============================================================================
%%===============================================================================
%%================================ טיפול במחרוזות ===============================
%%===============================================================================
%%===============================================================================
%%===============================================================================

%% אם המספר הוא חד ספרתי.
%% ======================

הפוך_למחרוזת(_מספר, _מחרוזת):-
			_מספר < 10,
			ספרה_למחרוזת(_מספר, _מחרוזת).



%% אם המספר הוא בעל יותר מאשר ספרה אחת.
%% =====================================

הפוך_למחרוזת(_מספר, _מחרוזת):-
			_מספר >= 10,
			פרק_מספר(_מספר, _אחדות, _שאר),
			ספרה_למחרוזת(_אחדות, _מחרוזת_אחדות),
			הפוך_למחרוזת(_שאר, _מחרוזת_של_שאר),
			שרשר_מחרוזות([_מחרוזת_של_שאר,_מחרוזת_אחדות], _מחרוזת).



%% פירוק של ספרת האחדות של המספר.
%% ===============================

פרק_מספר(_מספר, _אחדות, _שאר):-
			_אחדות  הוא  _מספר  mod 10,
			_שאר  הוא  _מספר  // 10.



%% ספרה_למחרוזת(_מספר_רכיב, _מספר_כמחרוזת).
%% =========================================

ספרה_למחרוזת(0, '0').
ספרה_למחרוזת(1, '1').
ספרה_למחרוזת(2, '2').
ספרה_למחרוזת(3, '3').
ספרה_למחרוזת(4, '4').
ספרה_למחרוזת(5, '5').
ספרה_למחרוזת(6, '6').
ספרה_למחרוזת(7, '7').
ספרה_למחרוזת(8, '8').
ספרה_למחרוזת(9, '9').


%%==========================================================================



%% על מנת לאתר טעות/טעויות
%% =======================

כתוב_שלי(_מה):-
	כתוב(_מה),שורה.

כתוב_שלי(_מה):-
	כתוב('חוזר '),
	כתוב(_מה),שורה,הכשל.

%%===============================================================================


חלק_ושארית(_מונה, _מכנה, _מנה, _שארית):-
            _מנה הוא _מונה // _מכנה,
            _שארית הוא _מונה mod _מכנה.
	


