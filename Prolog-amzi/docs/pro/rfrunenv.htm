<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">
<HTML>
<HEAD>
   <TITLE>Runtime and Environment</TITLE>
   <META NAME="GENERATOR" CONTENT="Mozilla/3.01Gold (Win95; I) [Netscape]">
</HEAD>
<BODY TEXT="#000000" BGCOLOR="#FFFFFF">
<h1><A NAME="RuntimeampEnvironment"></A><FONT COLOR="#D2AA00">Runtime &amp; Environment</FONT> 
</h1>
<P>This section contains predicates for: </P>

<MENU>
<LI><A HREF="#Setting Runtime Modes">Setting Runtime Modes</A> </LI>

<LI><A HREF="#Error Handling in Prolog">Error Handling in Prolog</A> </LI>

<LI><A HREF="#Miscellaneous Predicates">Miscellaneous Predicates</A> </LI>

<LI><A HREF="#Special Predicates for the Prolog Listener">Special Predicates
for the Prolog Listener</A> </LI>
</MENU>

<H2><A NAME="Setting Runtime Modes"></A><FONT COLOR="#0000FF">Setting Runtime
Modes</FONT></H2>

<P><!AMZI_INDEX= Modes>The following predicates turn on and off the modes
that control the behavior of the Prolog runtime system. The modes are described
in detail in the section on arun. </P>

<H3><A NAME="getmodeModeValue"></A><FONT COLOR="#000080">get_mode(Mode,
Value)</FONT></H3>

<P><!AMZI_INDEX= get_mode; Modes><B>get_mode/2</B> retrieves the current
setting of Mode, unifying Value the atoms 'on' and 'off' as appropriate.
</P>

<H3><A NAME="setmodeModeValue"></A><FONT COLOR="#000080">set_mode(Mode,
Value)</FONT></H3>

<P><!AMZI_INDEX=  set_mode; Modes><B>set_mode/2</B> sets the named Mode
to the Value, either 'on' and 'off.' </P>

<H2><A NAME="Miscellaneous Predicates"></A><FONT COLOR="#0000FF">Miscellaneous
Predicates</FONT></H2>

<P><!AMZI_INDEX=  Miscellaneous Predicates>Various predicates are provided
for getting information about the operation of the Prolog engine and the
computer environment. </P>

<H3><A NAME="abortSeverity"></A><FONT COLOR="#000080">abort(Severity)</FONT></H3>

<P><!AMZI_INDEX= abort; halt><B>abort</B> does the following based on the
value of Severity: </P>

<DL COMPACT> 
  <dl>
    <dt><B>0</B> </dt>
    <dd>closes any open files (after flushing them), resets the Prolog environment 
      and restarts the application. </dd>
    <dt><B>1</B> </dt>
    <dd>closes any open files (after flushing them) and behaves as <B>halt</B>. 
    </dd>
    <dt><B>2</B> </dt>
    <dd>closes any open files (after flushing them) and behaves as <B>halt</B> 
      except that the value returned to the operating system indicates an abnormal 
      return has occurred. </dd>
  </dl>
</DL>

<H3><A name="commandlineArgsL"></A><font color="#000080">command_line(ArgsL)</font></H3>
<p><!AMZI_INDEX=  command_line><b>command_line/1</b> succeeds by unifying ArgsL 
  with a list of character lists, each of which is an argument on the command 
  line used when the program was invoked. This predicate can be used only in command-line 
  environments or Windows console mode.</p>

<H3><A NAME="currentprologflagFlagAVValueNV"></A><FONT COLOR="#000080">current_prolog_flag(FlagAV, 
  ValueNV)</FONT></H3>

<P><!AMZI_INDEX= current_prolog_flag>current_prolog_flag returns various
system limits. Currently flags are: max_atoms, max_integer, min_integer.
</P>

<H3><A NAME="dateMonthNVDayNVYearNV"></A><FONT COLOR="#000080">date(MonthNV,
DayNV, YearNV)</FONT></H3>

<P><!AMZI_INDEX=  date><B>date</B> returns the Month, Day and Year if unbound.
If bound, then it unifies with them. For example: </P>

<UL>
<PRE><FONT COLOR="#000080">?- date(12, 16, 1999).  % Succeeds if today is 16 December 1999.</FONT></PRE>
</UL>

<H3><A NAME="highwater"></A><FONT COLOR="#000080">highwater(Heap, Local,
Control, Trail)</FONT></H3>

<P><!AMZI_INDEX=  highwater><B>highwater </B>predicate returns the highwater
marks used by these four control structures. These values can then be used
when initializing the Logic Server, to minimize the amount of resources
taken. </P>

<H3><A NAME="proheapTopPos"></A><FONT COLOR="#000080">pro_heap(Top, Pos)</FONT></H3>

<P><!AMZI_INDEX=; pro_heap; Heap; Stacks ><B>pro_heap/2</B> returns the
size, Top, and current position, Pos, of the heap. </P>

<H3><A NAME="procontrolTopPos"></A><FONT COLOR="#000080">pro_control(Top,
Pos)</FONT></H3>

<P><!AMZI_INDEX=  pro_control; Control; Stacks ><B>pro_control/2</B> returns
the size, Top, and current position, Pos, of the control stack. </P>

<H3><A NAME="prolocalTopPos"></A><FONT COLOR="#000080">pro_local(Top, Pos)</FONT></H3>

<P><!AMZI_INDEX=  pro_local; Local; Stacks><B>pro_local/2</B> returns the
size, Top, and current position, Pos, of the local stack. </P>

<H3><A NAME="protrailTopPos"></A><FONT COLOR="#000080">pro_trail(Top, Pos)</FONT></H3>

<P><!AMZI_INDEX= ; pro_trail; Trail; Stacks><B>pro_trail/2</B> returns
the size, Top, and current position, Pos, of the trail stack. </P>

<H3><A NAME="prodbDB"></A><FONT COLOR="#000080">pro_db(Allocated, Used)</FONT></H3>

<P><!AMZI_INDEX=  pro_db; Dynamic Database><B>pro_db/2</B> returns the
amount of dynamic database storage allocated by the Prolog engine at this
point in time, and the amount of that storage actually used. This predicate
is for information only, as the Logic Server allocates dynamic memory blocks
as it needs them.</P>

<H3><A NAME="stacksizesHeapControlLocalTrai"></A><FONT COLOR="#000080">stack_sizes(Heap,
Control, Local, Trail)</FONT></H3>

<P><!AMZI_INDEX=  stack_sizes; Heap; Control; Local; Trail; Stacks><B>stack_sizes</B>
returns the number of cells in use on each of the respective stacks. </P>

<H3><A NAME="systemCmdA"></A><FONT COLOR="#000080">system(CmdA)</FONT></H3>

<P><!AMZI_INDEX=  system><B>system/1</B> executes an operating system command
or program. </P>

<P>CmdA must be instantiated to an atom representing a command or program
that can be executed by the operating system. The call to <B>system/1 </B>succeeds
if the command &quot;succeeded&quot;. For example: </P>

<UL>
<PRE><FONT COLOR="#000080">?- system('dir c:\').</FONT></PRE>
</UL>

<H3><A NAME="timeHourMinSec"></A><FONT COLOR="#000080">time(Hour, Min,
Sec)</FONT></H3>

<P><!AMZI_INDEX=  time><B>time</B>/<B>3</B> succeeds by unifying Hour,
Min, and Sec to the current time-of-day (hours, minutes, and seconds respectively).
If any of these are given as integers, then <B>time/3</B> can be used as
an alarm clock, failing until the conditions are met. </P>

<H3><A NAME="timerTicks"></A><FONT COLOR="#000080">timer(Ticks)</FONT></H3>

<P><!AMZI_INDEX=  time; cputime><B>timer/1</B> succeeds if Ticks can be
instantiated to floating point seconds since some implementation dependent
time. </P>

<P>It is intended primarily for timing executions </P>

<UL>
<PRE><FONT COLOR="#000080">?- timer(X), do_something, timer(Y), Z is Y - X, write(Z).</FONT></PRE>
</UL>

<P>Note that timings can also be done using the built-in atom, <B>cputime</B>.
The value of <B>cputime</B> is the current elapsed time in floating point
seconds. It can be used in arithmetic expressions. </P>

<H3><A NAME="versionString"></A><FONT COLOR="#000080">version(String)</FONT></H3>

<P><!AMZI_INDEX=  version><B>version/1</B> returns a string with the current
Amzi! version. </P>

<H2><A NAME="Special Predicates for the Prolog Listener"></A><FONT COLOR="#0000FF">Special
Listener Predicates</FONT></H2>

<P><!AMZI_INDEX= Listener; pp; user_pp>These predicates, except <B>pp</B>
and <B>user_pp</B> can be entered only at the ?- prompt in the listener.
</P>

<H3><A NAME="add"></A><FONT COLOR="#000080">add</FONT></H3>

<P><!AMZI_INDEX=  add; Predicates>Allows you to add clauses to the dynamic
database. This is equivalent to consult. </P>

<H3><A NAME="consultproject"></A><FONT COLOR="#000080">consult_project(ProjectFile)</FONT></H3>

<P><!AMZI_INDEX=  Projects; consult_project>Consults all the files and
libraries in a project file. Note that if a project is already the current
project, consult automatically does a reconsult.</P>

<H3><A NAME="debug"></A><FONT COLOR="#000080">debug</FONT></H3>

<P><!AMZI_INDEX=  debug; Debugger>Enters the Debugger. See the Debugger
section for more information. </P>

<H3><A NAME="ppTermuserppTerm"></A><FONT COLOR="#000080">pp(Term), user_pp(Term)</FONT></H3>

<P><!AMZI_INDEX=  pp; user_pp><B>pp</B> first tries to prove <B>user_pp</B>(Term).
If this fails then it will pretty print Term at the user terminal (labeling
variables using <B>numbervars/3</B> and printing separate goals on separate
lines). </P>

<H3><A NAME="quit"></A><FONT COLOR="#000080">quit</FONT></H3>

<P><!AMZI_INDEX=  quit; Listener>Exits the current listener. </P>

<H3><A NAME="reconsultproject"></A><FONT COLOR="#000080">reconsult_project(ProjectFile)</FONT></H3>

<P><!AMZI_INDEX= reconsult_project>Reconsults a project file.</P>

<H3><A NAME="replace"></A><FONT COLOR="#000080">replace</FONT></H3>

<P><!AMZI_INDEX=  replace; reconsult; Clauses>Allows you to replace clauses
in the dynamic database. This is equivalent to <B>reconsult</B>. </P>

<P><B>replace</B> expects a sequence of clauses, followed by [ctrl-z] or
'quit.' rather than a single clause. </P>

<!-- #BeginLibraryItem "/Library/Copyright.lbi" --><p><i><font size=-1>Copyright &copy;1987-2000 Amzi! inc. All Rights Reserved.</font></i></p><!-- #EndLibraryItem --> 
<P>&nbsp; </P>

</BODY>
</HTML>
