
lsInit(007C1990, acmp)
   returns OK
lsInitLSX(007C1990, 00000000)
  returns OK
lsLoad(007C1990, acmp)
  returns OK
lsSetCommandArgs(007C1990)
  returns OK
lsMain(007C1990)
Amzi! Prolog Compiler 5.0.24 Windows
Apr 30 2001 13:54:06

Copyright (c)1987-2000 Amzi! inc. All Rights Reserved.


Compiling... acgi.pro
main :- catch((once cgiInitOutput ',' once cgiLoad ',' once cgiMain),H309,cgiError(H309)) ',' cgiFinish ',' truemain :- catch((once cgiInitOutput ',' once cgiLoad ',' once cgiMain),H309,cgi
|-- main / 0
main :- cgiError($cgiInit*, Main or Finish failed$) ',' cgiFinish ',' truemain :- cgiError($cgiInit*, Main or Finish failed$) ',' cgiFinish ',' true
|-- main / 0
dump(init,H288) :- assert(dump_file(H288)) ',' H303 is cputime ',' assert(last_dump(start,H303))dump(init,H288) :- assert(dump_file(H288)) ',' H303 is cputime ',' assert(las
|-- dump / 2
dump(time,H288) :- H295 is cputime ',' assert(last_dump(H288,H295))dump(time,H288) :- H295 is cputime ',' assert(last_dump(H288,H295))
|-- dump / 2
dump(close) :- dump_file(H291) ',' fopen(H295,H291,w) ',' time(H303,H304,H305) ',' write(H295,H303 : H304 : H305) ',' nl(H295) ',' nl(H295) ',' findall(H335 : H336,last_dump(H335,H336),H345) ',' report_dump(H295,H345) ',' '!' ',' fclose(H295)dump(close) :- dump_file(H291) ',' fopen(H295,H291,w) ',' time(H303,H304,H305
|-- dump / 1
report_dump(H287,'[]')report_dump(H287,'[]')
|-- report_dump / 2
report_dump(H287,[H290 : H291]) :- write(H287,H290 : H291) ',' nl(H287)report_dump(H287,[H290 : H291]) :- write(H287,H290 : H291) ',' nl(H287)
|-- report_dump / 2
report_dump(H287,[H290 : H291,H295 : H296 | H298]) :- H324 is integer(100 * (H296 - H291)) ',' write(H287,H324 : H290 : H291) ',' nl(H287) ',' report_dump(H287,[H295 : H296 | H298])report_dump(H287,[H290 : H291,H295 : H296 | H298]) :- H324 is integer(100 * (
|-- report_dump / 2
cgiInitOutput :- cgiOpen($$)cgiInitOutput :- cgiOpen($$)
|-- cgiInitOutput / 0
cgiInitOutput :- throw($cgiInitOutput failed
$)cgiInitOutput :- throw($cgiInitOutput failed
$)
|-- cgiInitOutput / 0
cgiFinish :- cgiClose ',' cgiCloseLogcgiFinish :- cgiClose ',' cgiCloseLog
|-- cgiFinish / 0
cgiFinishcgiFinish
|-- cgiFinish / 0
cgiError(H287) :- (system('Log Handle',H292) -> cgiLog(H287) ; true) ',' cgiErrorHeader ',' cgiDisplayErrorMessage(H287) ',' cgiSend($<P>$) ',' (cgiErrorNote ; true) ',' cgiSend($<P><HR><CENTER>$) ',' (system('Log File URL',H328) -> cgiSend([$<P><CENTER><A HREF="$,H328,$" TARGET="_blank">View Debugging Trace</A></CENTER>$]) ; true) ',' cgiSend($</CENTER></BODY></HTML>$) ',' cgiSend($$)cgiError(H287) :- (system('Log Handle',H292) -> cgiLog(H287) ; true) ',' cgiE
|-- cgiError / 1
cgiError(H287)cgiError(H287)
|-- cgiError / 1
cgiDisplayErrorMessage(error(H287,H288)) :- cgiSend([$<B>$,H287,$</B>:<P>$]) ',' cgiSendErrorList(H288)cgiDisplayErrorMessage(error(H287,H288)) :- cgiSend([$<B>$,H287,$</B>:<P>$]) 
|-- cgiDisplayErrorMessage / 1
cgiDisplayErrorMessage(H287) :- (string(H287) ; list(H287)) ',' cgiSend(H287)cgiDisplayErrorMessage(H287) :- (string(H287) ; list(H287)) ',' cgiSend(H287)
|-- cgiDisplayErrorMessage / 1
cgiDisplayErrorMessage(H287) :- structure(H287) ',' string_term(H295,H287) ',' string_list(H295,H302) ',' cgiExpandChars(H302,H308) ',' string_list(H313,H308) ',' cgiSend(H287)cgiDisplayErrorMessage(H287) :- structure(H287) ',' string_term(H295,H287) ',
|-- cgiDisplayErrorMessage / 1
cgiDisplayErrorMessage(H287) :- cgiSend(H287)cgiDisplayErrorMessage(H287) :- cgiSend(H287)
|-- cgiDisplayErrorMessage / 1
cgiSendErrorList('[]') :- '!'cgiSendErrorList('[]') :- '!'
|-- cgiSendErrorList / 1
cgiSendErrorList([type = H290 | H292]) :- cgiSend([$Type: $,H290,$<P>$]) ',' cgiSendErrorList(H292)cgiSendErrorList([type = H290 | H292]) :- cgiSend([$Type: $,H290,$<P>$]) ',' 
|-- cgiSendErrorList / 1
cgiSendErrorList([rc = H290 | H292]) :- cgiSend([$Number: $,H290,$<P>$]) ',' cgiSendErrorList(H292)cgiSendErrorList([rc = H290 | H292]) :- cgiSend([$Number: $,H290,$<P>$]) ',' 
|-- cgiSendErrorList / 1
cgiSendErrorList([message = H290 | H292]) :- cgiSend([$Message: $,H290,$<P>$]) ',' cgiSendErrorList(H292)cgiSendErrorList([message = H290 | H292]) :- cgiSend([$Message: $,H290,$<P>$]
|-- cgiSendErrorList / 1
cgiSendErrorList([read_buffer = H290 | H292]) :- cgiSend([$Error occured while reading the following text:<BR><UL>$,H290,$</UL><P>$]) ',' cgiSendErrorList(H292)cgiSendErrorList([read_buffer = H290 | H292]) :- cgiSend([$Error occured whil
|-- cgiSendErrorList / 1
cgiSendErrorList([read_file = H290 | H292]) :- cgiSend([$Text was being read from file: $,H290,$<P>$]) ',' cgiSendErrorList(H292)cgiSendErrorList([read_file = H290 | H292]) :- cgiSend([$Text was being read 
|-- cgiSendErrorList / 1
cgiSendErrorList([predicate = H290 | H292]) :- cgiSend([$Current Predicate: $,H290,$<P>$]) ',' cgiSendErrorList(H292)cgiSendErrorList([predicate = H290 | H292]) :- cgiSend([$Current Predicate: $
|-- cgiSendErrorList / 1
cgiSendErrorList([callstack = H290 | H292]) :- cgiSend([$Current Call Stack:<BR><UL>$,H290,$</UL><P>$]) ',' cgiSendErrorList(H292)cgiSendErrorList([callstack = H290 | H292]) :- cgiSend([$Current Call Stack:<
|-- cgiSendErrorList / 1
cgiSendErrorList([line_number = H290 | H292]) :- cgiSend([$The line number in the file was: $,H290,$<P>$]) ',' cgiSendErrorList(H292)cgiSendErrorList([line_number = H290 | H292]) :- cgiSend([$The line number in
|-- cgiSendErrorList / 1
cgiSendErrorList([H289 = H290 | H292]) :- cgiSend([H289,$: $,H290,$<P>$]) ',' cgiSendErrorList(H292)cgiSendErrorList([H289 = H290 | H292]) :- cgiSend([H289,$: $,H290,$<P>$]) ','
|-- cgiSendErrorList / 1
cgiErrorHeader :- cgiSend($Content-type: text/html$) ',' cgiSend($$) ',' cgiSend($<HTML><HEAD><TITLE>Error</TITLE></HEAD>$) ',' cgiSend($<BODY bgcolor=#FFB5DA text=#000000><HR><H1>Error</H1>$)cgiErrorHeader :- cgiSend($Content-type: text/html$) ',' cgiSend($$) ',' cgiS
|-- cgiErrorHeader / 0
cgiExpandChars('[]','[]')cgiExpandChars('[]','[]')
|-- cgiExpandChars / 2
cgiExpandChars([0w003e | H288],[0w0026,0w0067,0w0074,0w003b | H297]) :- '!' ',' cgiExpandChars(H288,H297)cgiExpandChars([0w003e | H288],[0w0026,0w0067,0w0074,0w003b | H297]) :- '!' '
|-- cgiExpandChars / 2
cgiExpandChars([0w003c | H288],[0w0026,0w006c,0w0074,0w003b | H297]) :- '!' ',' cgiExpandChars(H288,H297)cgiExpandChars([0w003c | H288],[0w0026,0w006c,0w0074,0w003b | H297]) :- '!' '
|-- cgiExpandChars / 2
cgiExpandChars([0w0026 | H288],[0w0026,0w0061,0w006d,0w0070,0w003b | H298]) :- '!' ',' cgiExpandChars(H288,H298)cgiExpandChars([0w0026 | H288],[0w0026,0w0061,0w006d,0w0070,0w003b | H298]) :
|-- cgiExpandChars / 2
cgiExpandChars([0w0022 | H288],[0w0026,0w0071,0w0075,0w006f,0w0074,0w003b | H299]) :- '!' ',' cgiExpandChars(H288,H299)cgiExpandChars([0w0022 | H288],[0w0026,0w0071,0w0075,0w006f,0w0074,0w003b | H
|-- cgiExpandChars / 2
cgiExpandChars([H287 | H288],[H287 | H294]) :- cgiExpandChars(H288,H294)cgiExpandChars([H287 | H288],[H287 | H294]) :- cgiExpandChars(H288,H294)
|-- cgiExpandChars / 2
cgiSend('[]') :- '!' ',' cgiWrite($
$)cgiSend('[]') :- '!' ',' cgiWrite($
$)
|-- cgiSend / 1
cgiSend(H287) :- list(H287) ',' '!' ',' cgiSendList(H287)cgiSend(H287) :- list(H287) ',' '!' ',' cgiSendList(H287)
|-- cgiSend / 1
cgiSend(H287) :- cgiWrite(H287) ',' cgiWrite($
$)cgiSend(H287) :- cgiWrite(H287) ',' cgiWrite($
$)
|-- cgiSend / 1
cgiSendList('[]') :- cgiWrite($
$)cgiSendList('[]') :- cgiWrite($
$)
|-- cgiSendList / 1
cgiSendList([H287 | H288]) :- cgiWrite(H287) ',' cgiSendList(H288)cgiSendList([H287 | H288]) :- cgiWrite(H287) ',' cgiSendList(H288)
|-- cgiSendList / 1
cgiSendLocalHTMLFile(H287) :- fopen(H291,H287,r) ',' repeat ',' (read_string(H291,H300) -> true ; throw([$Unable to read local HTML file $,H287,$
$])) ',' (H300 == '!EOF' -> true ; cgiSend(H300)) ',' H300 == '!EOF' ',' fclose(H291) ',' '!'cgiSendLocalHTMLFile(H287) :- fopen(H291,H287,r) ',' repeat ',' (read_string(
|-- cgiSendLocalHTMLFile / 1
cgiSendLocalHTMLFile(H287) :- throw([$Unable to open local HTML file $,H287,$
$])cgiSendLocalHTMLFile(H287) :- throw([$Unable to open local HTML file $,H287,$
|-- cgiSendLocalHTMLFile / 1
cgiSendURL(H287) :- cgiSend([$Location: $,H287]) ',' cgiSend($$)cgiSendURL(H287) :- cgiSend([$Location: $,H287]) ',' cgiSend($$)
|-- cgiSendURL / 1
cgiAskField(H287,H288,H289,H290,H291) :- cgiSend(H288) ',' (H289 == 0 -> cgiSend([$<INPUT NAME="$,H287,$">$,H290]) ; cgiSend([$<INPUT SIZE=$,H289,$ NAME="$,H287,$" VALUE="$,H291,$">$,H290]))cgiAskField(H287,H288,H289,H290,H291) :- cgiSend(H288) ',' (H289 == 0 -> cgiS
|-- cgiAskField / 5
cgiAskYesNo(H287,H288,H289) :- cgiSend(H288) ',' cgiSend([$<INPUT NAME="$,H287,$" TYPE="RADIO" VALUE="yes">Yes$,H289]) ',' cgiSend([$<INPUT NAME="$,H287,$" TYPE="RADIO" VALUE="no">No$,H289])cgiAskYesNo(H287,H288,H289) :- cgiSend(H288) ',' cgiSend([$<INPUT NAME="$,H28
|-- cgiAskYesNo / 3
cgiAskMenu(H287,H288,H289,radio,H291,H292) :- cgiSend(H288) ',' cgiAskInputChoices(H289,H287,$"RADIO"$,H292)cgiAskMenu(H287,H288,H289,radio,H291,H292) :- cgiSend(H288) ',' cgiAskInputCh
|-- cgiAskMenu / 6
cgiAskMenu(H287,H288,H289,checkbox,H291,H292) :- cgiSend(H288) ',' cgiAskInputChoices(H289,H287,$"CHECKBOX"$,H292)cgiAskMenu(H287,H288,H289,checkbox,H291,H292) :- cgiSend(H288) ',' cgiAskInpu
|-- cgiAskMenu / 6
cgiAskMenu(H287,H288,H289,listbox,H291,H292) :- cgiSend(H288) ',' cgiSend([$<SELECT NAME="$,H287,$" >$]) ',' cgiAskListChoices(H289,H292) ',' cgiSend($</SELECT>$)cgiAskMenu(H287,H288,H289,listbox,H291,H292) :- cgiSend(H288) ',' cgiSend([$<
|-- cgiAskMenu / 6
cgiAskMenu(H287,H288,H289,listboxMultiple,H291,H292) :- cgiSend(H288) ',' (H291 = 0 -> cgiLength(H289,H310) ',' (H310 < 8 -> H321 is H310 ; H321 is H310 // 2) ',' cgiSend([$<SELECT NAME="$,H287,$" MULTIPLE SIZE=$,H321,$ >$]) ; cgiSend([$<SELECT NAME="$,H287,$" MULTIPLE SIZE=$,H291,$ >$])) ',' cgiAskListChoices(H289,H292) ',' cgiSend($</SELECT>$)cgiAskMenu(H287,H288,H289,listboxMultiple,H291,H292) :- cgiSend(H288) ',' (H2
|-- cgiAskMenu / 6
cgiAskListChoices('[]',H289)cgiAskListChoices('[]',H289)
|-- cgiAskListChoices / 2
cgiAskListChoices([item(H287,H288) | H294],H299) :- (member(text = H307,H288) ; H307 = H287) ',' (member(selected,H288) -> cgiSend([$<OPTION SELECTED VALUE="$,H287,$">$,H307]) ; cgiSend([$<OPTION VALUE="$,H287,$">$,H307])) ',' cgiAskListChoices(H294,H299)cgiAskListChoices([item(H287,H288) | H294],H299) :- (member(text = H307,H288)
|-- cgiAskListChoices / 2
cgiAskListChoices([H287 | H288],H293) :- cgiSend([$<OPTION>$,H287]) ',' cgiAskListChoices(H288,H293)cgiAskListChoices([H287 | H288],H293) :- cgiSend([$<OPTION>$,H287]) ',' cgiAs
|-- cgiAskListChoices / 2
cgiAskInputChoices('[]',H289,H290,H291)cgiAskInputChoices('[]',H289,H290,H291)
|-- cgiAskInputChoices / 4
cgiAskInputChoices([item(H287,H288) | H294],H299,H300,H301) :- (member(text = H311,H288) ; H311 = H287) ',' (member(selected,H288) -> cgiSend([$<INPUT CHECKED NAME="$,H299,$" TYPE=$,H300,$ VALUE="$,H287,$">$,H311,H301]) ; cgiSend([$<INPUT NAME="$,H299,$" TYPE=$,H300,$ VALUE="$,H287,$">$,H311,H301])) ',' cgiAskInputChoices(H294,H299,H300,H301)cgiAskInputChoices([item(H287,H288) | H294],H299,H300,H301) :- (member(text =
|-- cgiAskInputChoices / 4
cgiAskInputChoices([H287 | H288],H293,H294,H295) :- cgiSend([$<INPUT NAME="$,H293,$" TYPE=$,H294,$ VALUE="$,H287,$">$,H287,H295]) ',' cgiAskInputChoices(H288,H293,H294,H295)cgiAskInputChoices([H287 | H288],H293,H294,H295) :- cgiSend([$<INPUT NAME="$,
|-- cgiAskInputChoices / 4
cgiAskTextbox(H287,H288,H289,H290) :- cgiSend([H288,$<TEXTAREA NAME="$,H287,$" COLS=60 ROWS=$,H289,$></TEXTAREA>$])cgiAskTextbox(H287,H288,H289,H290) :- cgiSend([H288,$<TEXTAREA NAME="$,H287,$
|-- cgiAskTextbox / 4
cgiLog(H287) :- not system('Log File',H292) ',' '!'cgiLog(H287) :- not system('Log File',H292) ',' '!'
|-- cgiLog / 1
cgiLog(H287) :- var(H287) ',' '!' ',' cgiGetLogHandle(H295) ',' write(H295,var(H287)) ',' fflush(H295)cgiLog(H287) :- var(H287) ',' '!' ',' cgiGetLogHandle(H295) ',' write(H295,va
|-- cgiLog / 1
cgiLog(tab(H287)) :- '!' ',' cgiGetLogHandle(H295) ',' tab(H295,H287)cgiLog(tab(H287)) :- '!' ',' cgiGetLogHandle(H295) ',' tab(H295,H287)
|-- cgiLog / 1
cgiLog(H287) :- list(H287) ',' '!' ',' cgiGetLogHandle(H295) ',' cgiLogListWrite(H295,H287) ',' fflush(H295)cgiLog(H287) :- list(H287) ',' '!' ',' cgiGetLogHandle(H295) ',' cgiLogListWr
|-- cgiLog / 1
cgiLog(H287) :- '!' ',' cgiGetLogHandle(H291) ',' write(H291,H287) ',' fflush(H291)cgiLog(H287) :- '!' ',' cgiGetLogHandle(H291) ',' write(H291,H287) ',' fflush
|-- cgiLog / 1
cgiLog(H287)cgiLog(H287)
|-- cgiLog / 1
cgiGetLogHandle(H287) :- system('Log Handle',H287) ',' '!'cgiGetLogHandle(H287) :- system('Log Handle',H287) ',' '!'
|-- cgiGetLogHandle / 1
cgiGetLogHandle(H287) :- system('Log File',H292) ',' cgiOpenLog(H292,H287)cgiGetLogHandle(H287) :- system('Log File',H292) ',' cgiOpenLog(H292,H287)
|-- cgiGetLogHandle / 1
cgiOpenLog(H287,H288) :- system('Log Handle',H288) ',' '!'cgiOpenLog(H287,H288) :- system('Log Handle',H288) ',' '!'
|-- cgiOpenLog / 2
cgiOpenLog(H287,H288) :- once cgiIntro(H287) ',' fopen(H288,H287,a) ',' asserta(system('Log Handle',H288)) ',' '!'cgiOpenLog(H287,H288) :- once cgiIntro(H287) ',' fopen(H288,H287,a) ',' asser
|-- cgiOpenLog / 2
cgiOpenLog(H287,H288) :- set_mode(file_errors,on) ',' throw([$Unable to open log file $,H287,$. Check if the directory path exists and is correct.
$])cgiOpenLog(H287,H288) :- set_mode(file_errors,on) ',' throw([$Unable to open 
|-- cgiOpenLog / 2
cgiIntro(H287) :- tell(H287) ',' write($<HTML><HEAD><TITLE>Logic-Base Debugging Trace</TITLE></HEAD>
$) ',' write($<BODY><BODY bgcolor=#FFFFF0 text=#000000><H2><FONT COLOR=blue>Logic-Base Debugging Trace</FONT></H2>$) ',' write($<HR><H2><FONT COLOR=red>Press the 'Reload' button on your browser to see the latest trace!</FONT></H2><P><PRE>
$) ',' cgiLogFactsWrite ',' nl ',' toldcgiIntro(H287) :- tell(H287) ',' write($<HTML><HEAD><TITLE>Logic-Base Debuggi
|-- cgiIntro / 1
cgiIntro(H287)cgiIntro(H287)
|-- cgiIntro / 1
cgiLogFactsWrite :- cgiListing(system(H287,H288)) ',' nl ',' cgiListing(accept(H297,H298)) ',' nl ',' cgiListing(extraheaders(H307,H308)) ',' nl ',' cgiListing(cgi(H317,H318)) ',' nlcgiLogFactsWrite :- cgiListing(system(H287,H288)) ',' nl ',' cgiListing(accep
|-- cgiLogFactsWrite / 0
cgiLogFactsWritecgiLogFactsWrite
|-- cgiLogFactsWrite / 0
cgiLogFacts(H287,H288) :- fact(H293,H294) ',' (member(H293,H287) -> true ; cgiLog(tab(H288)) ',' cgiLog([H293,$ = $,H294,$
$])) ',' failcgiLogFacts(H287,H288) :- fact(H293,H294) ',' (member(H293,H287) -> true ; cg
|-- cgiLogFacts / 2
cgiLogFacts(H287,H288)cgiLogFacts(H287,H288)
|-- cgiLogFacts / 2
cgiListing(H287) :- call(H287) ',' string_term(H295,H287) ',' string_list(H295,H302) ',' cgiExpandChars(H302,H308) ',' string_list(H313,H308) ',' write(H313) ',' nl ',' failcgiListing(H287) :- call(H287) ',' string_term(H295,H287) ',' string_list(H29
|-- cgiListing / 1
cgiListing(H287)cgiListing(H287)
|-- cgiListing / 1
cgiLogListWrite(H287,'[]')cgiLogListWrite(H287,'[]')
|-- cgiLogListWrite / 2
cgiLogListWrite(H287,[H288 | H289]) :- write(H287,H288) ',' cgiLogListWrite(H287,H289)cgiLogListWrite(H287,[H288 | H289]) :- write(H287,H288) ',' cgiLogListWrite(H
|-- cgiLogListWrite / 2
cgiCloseLog :- system('Log Handle',H288) ',' '!' ',' write(H288,$

</PRE><P><HR>See the <A HREF="http://www.amzi.com">Amzi! Web Site</A> for more information and documentation</BODY></HTML>$) ',' fclose(H288)cgiCloseLog :- system('Log Handle',H288) ',' '!' ',' write(H288,$

</PRE><P><
|-- cgiCloseLog / 0
cgiCloseLogcgiCloseLog
|-- cgiCloseLog / 0
cgiLogSuspend :- retract(system('Log File',H288)) ',' asserta(system('Suspended Log File',H288))cgiLogSuspend :- retract(system('Log File',H288)) ',' asserta(system('Suspend
|-- cgiLogSuspend / 0
cgiLogSuspendcgiLogSuspend
|-- cgiLogSuspend / 0
cgiLogResume :- retract(system('Suspended Log File',H288)) ',' asserta(system('Log File',H288))cgiLogResume :- retract(system('Suspended Log File',H288)) ',' asserta(system
|-- cgiLogResume / 0
cgiLogResumecgiLogResume
|-- cgiLogResume / 0
cgiLength(H287,H288) :- cgiLength(H287,0,H288)cgiLength(H287,H288) :- cgiLength(H287,0,H288)
|-- cgiLength / 2
cgiLength('[]',H289,H289)cgiLength('[]',H289,H289)
|-- cgiLength / 3
cgiLength([H287 | H288],H293,H294) :- H306 is H293 + 1 ',' cgiLength(H288,H306,H294)cgiLength([H287 | H288],H293,H294) :- H306 is H293 + 1 ',' cgiLength(H288,H30
|-- cgiLength / 3
'!EOF''!EOF'

[CodeSize 14780 Bytes, Compile time 0.41 seconds.]
Done

  returns TRUE
lsClose(007C1990)